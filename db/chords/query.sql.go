// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package chords

import (
	"context"
)

const createChord = `-- name: CreateChord :one
INSERT INTO chords (
  name, root
) VALUES (
  $1, $2
)
RETURNING id, name, root
`

type CreateChordParams struct {
	Name string
	Root string
}

func (q *Queries) CreateChord(ctx context.Context, arg CreateChordParams) (Chord, error) {
	row := q.db.QueryRow(ctx, createChord, arg.Name, arg.Root)
	var i Chord
	err := row.Scan(&i.ID, &i.Name, &i.Root)
	return i, err
}

const deleteChord = `-- name: DeleteChord :exec
DELETE FROM chords
WHERE id = $1
`

func (q *Queries) DeleteChord(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteChord, id)
	return err
}

const getChord = `-- name: GetChord :one
SELECT id, name, root FROM chords
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChord(ctx context.Context, id int64) (Chord, error) {
	row := q.db.QueryRow(ctx, getChord, id)
	var i Chord
	err := row.Scan(&i.ID, &i.Name, &i.Root)
	return i, err
}

const listChords = `-- name: ListChords :many
SELECT id, name, root FROM chords
ORDER BY name
`

func (q *Queries) ListChords(ctx context.Context) ([]Chord, error) {
	rows, err := q.db.Query(ctx, listChords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Chord
	for rows.Next() {
		var i Chord
		if err := rows.Scan(&i.ID, &i.Name, &i.Root); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChord = `-- name: UpdateChord :exec
UPDATE chords
  set name = $2,
  root = $3
WHERE id = $1
`

type UpdateChordParams struct {
	ID   int64
	Name string
	Root string
}

func (q *Queries) UpdateChord(ctx context.Context, arg UpdateChordParams) error {
	_, err := q.db.Exec(ctx, updateChord, arg.ID, arg.Name, arg.Root)
	return err
}
